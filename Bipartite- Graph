class Solution {
public:
    bool dfs(vector<vector<int>>& graph, vector<int> &vis, vector<int> &colour, int node, bool col){
        vis[node] = 1;
        colour[node] = col;
        for(int child : graph[node]){
            if(!vis[child]){
                bool result = dfs(graph,vis,colour,child,!col);
                if(result == false){
                    return false;
                }
            }
            else{
                if(colour[child] == colour[node]){
                    return false;
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> vis(graph.size(),0);
        vector<int> colour(graph.size(),0);
        int node = 0;
        bool col = 0;
        bool check = true;
        for(int i=0; i<graph.size(); i++){
            if(!vis[i]){
                check = dfs(graph,vis,colour,i,col);
                if(check == false){
                    return false;
                }
            }
        }
        return check;
    }
};
